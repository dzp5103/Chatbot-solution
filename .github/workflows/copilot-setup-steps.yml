name: ü§ñ Chatbot Solution - Coding Agent Workflow

on:
  workflow_dispatch:
    inputs:
      task_description:
        description: 'Describe the chatbot development task'
        required: true
        type: string
      deployment_target:
        description: 'Target deployment environment'
        required: false
        default: 'local'
        type: choice
        options:
          - local
          - docker
          - cloud
          - self-hosted
  push:
    branches: [ main, develop ]
    paths:
      - 'chatbot-solutions/**'
      - 'deployment-configs/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"
  CHATBOT_WORKSPACE: "./chatbot-workspace"

jobs:
  setup-coding-agent:
    name: üöÄ Setup Enhanced Coding Agent for Chatbot Development
    runs-on: ubuntu-latest
    
    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üêç Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üåç Environment Validation
        run: |
          echo "üîç Validating chatbot development environment..."
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "Python version: $(python --version)"
          echo "Current working directory: $(pwd)"
          echo "Available disk space: $(df -h . | tail -1 | awk '{print $4}')"
          echo "Memory: $(free -h | head -2 | tail -1 | awk '{print $2}')"
          
          # Check required commands for chatbot development
          command -v node >/dev/null 2>&1 || { echo "‚ùå Node.js is required for chatbot frameworks"; exit 1; }
          command -v npm >/dev/null 2>&1 || { echo "‚ùå npm is required for package management"; exit 1; }
          command -v python >/dev/null 2>&1 || { echo "‚ùå Python is required for AI/ML chatbot components"; exit 1; }
          command -v git >/dev/null 2>&1 || { echo "‚ùå Git is required for version control"; exit 1; }
          
          echo "‚úÖ Chatbot development environment validation passed"

      - name: üõ°Ô∏è Configure Copilot Agent with Disabled Firewall
        run: |
          echo "üîß Setting up Copilot coding agent configuration for chatbot development..."
          mkdir -p ~/.config/copilot-coding-agent
          cat << 'EOF' > ~/.config/copilot-coding-agent/agent.config.json
          {
            "firewall": { 
              "enabled": false,
              "allowlist": [
                "0.0.0.0/0",
                "*.github.com",
                "*.githubusercontent.com",
                "api.openai.com",
                "*.openai.com",
                "accounts.google.com",
                "clients2.google.com",
                "googlechromelabs.github.io",
                "storage.googleapis.com",
                "safebrowsingohttpgateway.googleapis.com",
                "chrome-for-testing-public",
                "registry.npmjs.org",
                "pypi.org",
                "*.pypi.org",
                "huggingface.co",
                "*.huggingface.co",
                "ollama.ai",
                "*.ollama.ai",
                "docker.io",
                "*.docker.io"
              ]
            },
            "project_context": {
              "type": "Chatbot Solution Repository",
              "primary_purpose": "Curated chatbot solutions and deployment guides",
              "supported_languages": ["JavaScript", "TypeScript", "Python", "Go", "Rust"],
              "chatbot_frameworks": [
                "Botpress",
                "Rasa",
                "Microsoft Bot Framework",
                "Dialogflow",
                "Wit.ai",
                "ChatterBot",
                "BotMan",
                "Botkit"
              ],
              "deployment_targets": ["Docker", "Kubernetes", "Cloud Functions", "Self-hosted", "Local"]
            },
            "mcp_server_config": {
              "enabled": true,
              "servers": [
                {
                  "name": "chatbot-mcp",
                  "command": "npx",
                  "args": ["@modelcontextprotocol/server-everything"],
                  "env": {
                    "CHATBOT_WORKSPACE": "./chatbot-workspace",
                    "MCP_LOG_LEVEL": "debug"
                  }
                },
                {
                  "name": "browser-automation-mcp",
                  "command": "npx",
                  "args": ["@modelcontextprotocol/server-brave-search"],
                  "env": {
                    "BRAVE_API_KEY": "${{ secrets.BRAVE_API_KEY || 'demo-key' }}"
                  }
                }
              ]
            },
            "browser_automation": {
              "enabled": true,
              "headless": true,
              "chrome_flags": [
                "--no-sandbox",
                "--disable-setuid-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--no-first-run",
                "--disable-background-timer-throttling",
                "--disable-backgrounding-occluded-windows"
              ]
            },
            "enhanced_features": {
              "advanced_prompts": true,
              "security_scanning": true,
              "performance_analysis": true,
              "dependency_auditing": true,
              "chatbot_testing": true,
              "conversation_flow_analysis": true,
              "intent_recognition_validation": true
            },
            "automation_preferences": {
              "auto_fix_lint": true,
              "auto_generate_tests": true,
              "auto_update_docs": true,
              "auto_security_patches": true,
              "auto_chatbot_deployment": true,
              "auto_conversation_testing": true
            },
            "chatbot_specific_tools": {
              "nlp_libraries": ["spacy", "nltk", "transformers"],
              "testing_frameworks": ["jest", "pytest", "chai"],
              "deployment_tools": ["docker", "kubernetes", "terraform"],
              "monitoring_tools": ["prometheus", "grafana", "datadog"]
            }
          }
          EOF
          
          echo "‚úÖ Copilot agent configuration created successfully"

      - name: üîç Verify Agent Configuration
        run: |
          echo "üìã Copilot agent configuration contents:"
          if command -v jq >/dev/null 2>&1; then
            jq . ~/.config/copilot-coding-agent/agent.config.json
          else
            cat ~/.config/copilot-coding-agent/agent.config.json
          fi

      - name: üåê Install Browser Dependencies for Automation
        run: |
          echo "üåê Installing browser dependencies for chatbot testing and automation..."
          
          # Update package list
          sudo apt-get update
          
          # Install essential packages
          sudo apt-get install -y \
            wget \
            gnupg \
            curl \
            unzip \
            xvfb \
            libnss3-dev \
            libgconf-2-4 \
            libxss1 \
            libappindicator1 \
            fonts-liberation \
            libappindicator3-1 \
            libasound2 \
            libatk-bridge2.0-0 \
            libgtk-3-0
          
          # Add Google Chrome repository
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list
          
          # Install Chrome for browser automation
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Verify installation
          google-chrome --version
          echo "‚úÖ Chrome installed successfully for chatbot browser automation"

      - name: üì¶ Install MCP Server Dependencies
        run: |
          echo "üì¶ Installing MCP server dependencies for enhanced chatbot development..."
          
          # Install Node.js MCP packages
          npm install -g \
            @modelcontextprotocol/server-everything \
            @modelcontextprotocol/server-brave-search \
            @modelcontextprotocol/server-filesystem \
            @modelcontextprotocol/server-git
          
          # Install Python MCP packages
          pip install \
            mcp \
            mcp-server-git \
            mcp-server-filesystem
          
          echo "‚úÖ MCP server dependencies installed"

      - name: üöÄ Setup Chatbot Development Workspace
        run: |
          echo "üöÄ Setting up dedicated chatbot development workspace..."
          mkdir -p ${{ env.CHATBOT_WORKSPACE }}
          cd ${{ env.CHATBOT_WORKSPACE }}
          
          # Create directory structure for chatbot solutions
          mkdir -p {
            frameworks/{botpress,rasa,microsoft-bot,dialogflow},
            deployment/{docker,kubernetes,cloud-functions,self-hosted},
            examples/{basic,advanced,industry-specific},
            testing/{unit,integration,conversation-flow},
            documentation/{setup,deployment,troubleshooting},
            tools/{automation,monitoring,analytics}
          }
          
          # Create workspace configuration
          cat << 'EOF' > workspace.config.json
          {
            "workspace_type": "chatbot_development",
            "supported_frameworks": [
              "botpress", "rasa", "microsoft-bot", "dialogflow",
              "wit.ai", "chatterbot", "botman", "botkit"
            ],
            "deployment_targets": [
              "docker", "kubernetes", "cloud-functions", "self-hosted", "local"
            ],
            "testing_enabled": true,
            "browser_automation_enabled": true,
            "mcp_servers_enabled": true
          }
          EOF
          
          echo "‚úÖ Chatbot development workspace ready"

      - name: üß™ Initialize Chatbot Testing Environment
        run: |
          echo "üß™ Setting up chatbot testing environment..."
          cd ${{ env.CHATBOT_WORKSPACE }}
          
          # Install testing dependencies
          npm init -y
          npm install --save-dev \
            jest \
            puppeteer \
            playwright \
            axios \
            chai \
            mocha \
            selenium-webdriver
          
          # Create basic test configuration
          cat << 'EOF' > jest.config.js
          module.exports = {
            testEnvironment: 'node',
            roots: ['<rootDir>/testing'],
            testMatch: ['**/__tests__/**/*.js', '**/?(*.)+(spec|test).js'],
            collectCoverageFrom: [
              'frameworks/**/*.js',
              'deployment/**/*.js',
              '!**/node_modules/**'
            ],
            setupFilesAfterEnv: ['<rootDir>/testing/setup.js']
          };
          EOF
          
          # Create browser automation setup
          cat << 'EOF' > testing/browser-setup.js
          const puppeteer = require('puppeteer');
          
          module.exports = {
            async setupBrowser() {
              return await puppeteer.launch({
                headless: true,
                args: [
                  '--no-sandbox',
                  '--disable-setuid-sandbox',
                  '--disable-dev-shm-usage',
                  '--disable-gpu'
                ]
              });
            }
          };
          EOF
          
          echo "‚úÖ Chatbot testing environment initialized"

      - name: üîß Configure Development Tools
        run: |
          echo "üîß Configuring chatbot development tools..."
          
          # Install global development tools
          npm install -g \
            nodemon \
            pm2 \
            eslint \
            prettier \
            typescript \
            ts-node
          
          # Install Python chatbot development tools
          pip install \
            rasa \
            spacy \
            nltk \
            transformers \
            torch \
            tensorflow \
            flask \
            fastapi \
            uvicorn
          
          # Download spaCy language model
          python -m spacy download en_core_web_sm
          
          echo "‚úÖ Development tools configured"

      - name: ‚úÖ Finalize Setup
        run: |
          echo "üéâ Chatbot Solution coding agent setup complete!"
          echo ""
          echo "üìã Setup Summary:"
          echo "‚îú‚îÄ‚îÄ ü§ñ Copilot coding agent configured with disabled firewall"
          echo "‚îú‚îÄ‚îÄ üåê Browser automation ready (Chrome + Puppeteer + Playwright)"
          echo "‚îú‚îÄ‚îÄ üì° MCP servers installed and configured"
          echo "‚îú‚îÄ‚îÄ üß™ Testing environment initialized"
          echo "‚îú‚îÄ‚îÄ üì¶ Chatbot frameworks and tools installed"
          echo "‚îú‚îÄ‚îÄ üöÄ Development workspace created at ${{ env.CHATBOT_WORKSPACE }}"
          echo "‚îî‚îÄ‚îÄ ‚úÖ Ready for chatbot solution development!"
          echo ""
          echo "üîó Available MCP Servers:"
          echo "‚îú‚îÄ‚îÄ @modelcontextprotocol/server-everything"
          echo "‚îú‚îÄ‚îÄ @modelcontextprotocol/server-brave-search"
          echo "‚îú‚îÄ‚îÄ @modelcontextprotocol/server-filesystem"
          echo "‚îî‚îÄ‚îÄ @modelcontextprotocol/server-git"
          echo ""
          echo "ü§ñ Supported Chatbot Frameworks:"
          echo "‚îú‚îÄ‚îÄ Botpress"
          echo "‚îú‚îÄ‚îÄ Rasa"
          echo "‚îú‚îÄ‚îÄ Microsoft Bot Framework"
          echo "‚îú‚îÄ‚îÄ Dialogflow"
          echo "‚îú‚îÄ‚îÄ Wit.ai"
          echo "‚îú‚îÄ‚îÄ ChatterBot"
          echo "‚îú‚îÄ‚îÄ BotMan"
          echo "‚îî‚îÄ‚îÄ Botkit"
          echo ""
          echo "üöÄ Deployment Options:"
          echo "‚îú‚îÄ‚îÄ Docker containers"
          echo "‚îú‚îÄ‚îÄ Kubernetes clusters"
          echo "‚îú‚îÄ‚îÄ Cloud Functions"
          echo "‚îú‚îÄ‚îÄ Self-hosted solutions"
          echo "‚îî‚îÄ‚îÄ Local development"

  validate-setup:
    name: üîç Validate Chatbot Development Environment
    needs: setup-coding-agent
    runs-on: ubuntu-latest
    
    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4

      - name: üîç Run Environment Validation
        run: |
          echo "üîç Validating complete chatbot development setup..."
          
          # Check if all required tools are available
          commands=("node" "npm" "python" "pip" "google-chrome" "git")
          for cmd in "${commands[@]}"; do
            if command -v "$cmd" >/dev/null 2>&1; then
              echo "‚úÖ $cmd is available"
            else
              echo "‚ùå $cmd is missing"
              exit 1
            fi
          done
          
          echo "üéâ All validation checks passed! Environment is ready for chatbot development."
